<?php

/**
 * @file
 * Primary module hooks for admincontacts module.
 *
 * @DCG
 * This file is no longer required in Drupal 8.
 * @see https://www.drupal.org/node/2217931
 */
function admincontacts_page_attachments(&$page) {
  $page['#attached']['library'][] =  'admincontacts/admincontacts';
}
function admincontacts_theme($existing, $type, $theme, $path) {
  return [
    'admincontacts_main' => [
      'render_element' => 'children',
      'path' => $path . '/templates',
      'template' => 'acmain-main',
      'variables' => [
        'searchform' => 'Default search form value',
      ],
    ],
  ];
}
function admincontacts_form_alter (&$form, \Drupal\Core\Form\FormStateInterface $formState, $form_id)
{
  $match = 'contactdata_edit_form';
  if (strpos($form_id, $match) !== false) {
    $form['field_taginfo']['widget'][0][] = [
      '#chosen' => TRUE,
    ];
    $x = 1;
  }
}

/**
 * Implements hook_entity_display_build_alter().
 */

function admincontacts_entity_display_build_alter(&$build, $context)
{
  /*
   * This method hijacks the contactdata entity display and creates the output
   * that I want.  It is an example of a routine altering the render array before it
   * is sent back to the browser.
   */
  /*@TODO  I need to put a test in here to see if this contact has a QVF record.
    If it does, fine, but if it doesnt' then I should put an "UNMATCHED" line in the output
    so that the user will know that this record is not sourced from a QVF file.

    I don't like doing this becauese it involves another hit on the database, but this is
    just for displaying the contact view form, so it will not be a major penalty.
  */
  if  ((strpos($context['entity']->getEntityTypeId(), 'contactdata') !== false) &&
    (strpos($GLOBALS['_SERVER']['REQUEST_URI'],  'contactdata' . chr(47 ) )   == true ) ) {
    $build = [];
    $build['wrapper'] = array(
      '#type' => 'item',
      '#wrapper_attributes' => ['class' => 'contactdisplay'],
    );
    $build['wrapper']['contactname'] = [
      '#type' => 'item',
      '#markup' => '<h1>' . $context['entity']->field_lastname->getString() . ', ' .
        $context['entity']->field_firstname->getString(). '</h1>',
    ];
    $build['wrapper']['contactaddress'] = [
      '#type' => 'item',
      '#markup' => '<h2>' . $context['entity']->field_primaryaddress1->getString() . '<br>' .
        $context['entity']->field_primarycity->getString() .  ', ' .
        $context['entity']->field_primaryzip->getString() . '<br>' .
        $context['entity']->field_precinctname->getString(),
    ];
    $build['wrapper']['contactid'] = [
      '#type' => 'item',
      '#markup' => '<h2> Contact ID:  ' . $context['entity']->id() ,
    ];
    $build['wrapper']['contactage'] = [
      '#type' => 'item',
      '#markup' => '<h2>' . 'Age: ' . $context['entity']->field_age->value  . '<br>' .
        'Voted in ' . $context['entity']->get('field_generalfrequency')->getString() . ' of the last 4 general elections',
    ];

    $build['wrapper']['contactphonesview'] = [
      '#prefix' => '<div class="phoneview">',
      '#suffix' => '<br><br></div>',
      '#type' => 'view',
      '#name' => 'phoneview2',
      '#arguments' => [$context['entity']->id->getString()],
      '#embed' => TRUE,
    ];

    $build['wrapper']['contactemailview'] = [
      '#prefix' => '<div class="emailview">',
      '#suffix' => '<br><br></div>',
      '#type' => 'view',
      '#name' => 'emailview',
      '#arguments' => [$context['entity']->id->getString()],
      '#embed' => TRUE,
    ];

    $build['wrapper']['contacttagview'] = [
      '#prefix' => '<div class="tagview">',
      '#suffix' => '<br><br></div>',
      '#type' => 'view',
      '#name' => 'tagview',
      '#arguments' => [$context['entity']->id->getString()],
      '#embed' => TRUE,
    ];
    $notestring = $context['entity']->field_notes->getString();
    if (strlen($notestring)) {
      $build['wrapper']['contactnotes'] = [
        '#prefix' => '<div class="noteview">NOTES',
        '#suffix' => '<br></div>',
        '#type' => 'item',
        '#markup' => $notestring,
      ];
    }
    return $build;
  }
}



